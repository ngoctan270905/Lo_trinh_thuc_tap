import tkinter as tk
from tkinter import ttk, messagebox
import numpy as np

# ==== D·ªÆ LI·ªÜU M·∫™U ====0
events = [
    {"id": "EV001", "name": "H·ªôi ch·ª£ s√°ch", "ticket_price": 50000.0, "tickets_left": 200},
    {"id": "EV002", "name": "Tri·ªÉn l√£m ngh·ªá thu·∫≠t", "ticket_price": 75000.0, "tickets_left": 50},
    {"id": "EV003", "name": "Workshop Python", "ticket_price": 30000.0, "tickets_left": 15},
    {"id": "EV004", "name": "ƒê√™m nh·∫°c d√¢n gian", "ticket_price": 100000.0, "tickets_left": 5},
    {"id": "EV005", "name": "Chi·∫øu phim mi·ªÖn ph√≠", "ticket_price": 0.0, "tickets_left": 100}
]

sponsors = {
    "SP001": ("C√¥ng ty A", 5000000.0),
    "SP002": ("C√¥ng ty B", 3000000.0),
}

sold_events_set = set()
ticket_history = []  # List of dicts: {"event_id", "ticket_id", "quantity"}

# ==== H√ÄM X·ª¨ L√ù ====

def add_event(event_id, name, price, quantity):
    if any(ev["id"] == event_id for ev in events):
        messagebox.showerror("L·ªói", "M√£ s·ª± ki·ªán ƒë√£ t·ªìn t·∫°i.")
        return
    events.append({"id": event_id, "name": name, "ticket_price": price, "tickets_left": quantity})
    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m s·ª± ki·ªán {name}.")
    refresh_event_table()

def update_event_quantity(event_id, quantity):
    for ev in events:
        if ev["id"] == event_id:
            ev["tickets_left"] = quantity
            messagebox.showinfo("C·∫≠p nh·∫≠t", f"ƒê√£ c·∫≠p nh·∫≠t s·ªë v√© c√≤n l·∫°i cho {ev['name']}.")
            refresh_event_table()
            return
    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán.")

def find_event(event_id):
    for ev in events:
        if ev["id"] == event_id:
            return ev
    return None

def add_sponsor(sponsor_id, name, amount):
    if sponsor_id in sponsors:
        messagebox.showerror("L·ªói", "M√£ t√†i tr·ª£ ƒë√£ t·ªìn t·∫°i.")
        return
    sponsors[sponsor_id] = (name, amount)
    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m nh√† t√†i tr·ª£ {name}.")
    refresh_sponsor_table()

def update_sponsor_amount(sponsor_id, new_amount):
    if sponsor_id in sponsors:
        name, _ = sponsors[sponsor_id]
        sponsors[sponsor_id] = (name, new_amount)
        messagebox.showinfo("C·∫≠p nh·∫≠t", f"ƒê√£ c·∫≠p nh·∫≠t t√†i tr·ª£ c·ªßa {name}.")
        refresh_sponsor_table()
    else:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y nh√† t√†i tr·ª£.")

def process_ticket_sale(event_id, ticket_id, quantity):
    ev = find_event(event_id)
    if not ev:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán.")
        return
    if quantity <= 0:
        messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.")
        return
    if ev["tickets_left"] < quantity:
        messagebox.showerror("L·ªói", "Kh√¥ng ƒë·ªß v√©.")
        return
    ev["tickets_left"] -= quantity
    sold_events_set.add(event_id)
    ticket_history.append({"event_id": event_id, "ticket_id": ticket_id, "quantity": quantity})
    messagebox.showinfo("B√°n v√©", f"ƒê√£ b√°n {quantity} v√© cho {ev['name']}")
    refresh_ticket_table()
    refresh_event_table()

def generate_report():
    low_ticket_events = [ev["name"] for ev in events if ev["tickets_left"] < 20]
    total_value = sum(ev["ticket_price"] * ev["tickets_left"] for ev in events)
    sold_ids = set(s["event_id"] for s in ticket_history)

    result = f"S·ª± ki·ªán s·∫Øp h·∫øt v√©: {', '.join(low_ticket_events) or 'Kh√¥ng c√≥'}\n"
    result += f"T·ªïng gi√° tr·ªã v√© c√≤n l·∫°i: {int(total_value):,} VNƒê\n"
    result += f"S·ª± ki·ªán ƒë√£ b√°n v√©: {', '.join(sold_ids) or 'Ch∆∞a c√≥'}"

    messagebox.showinfo("B√°o c√°o th·ªëng k√™", result)

# ==== GIAO DI·ªÜN ====

root = tk.Tk()
root.title("Qu·∫£n L√Ω S·ª± Ki·ªán VƒÉn H√≥a")
root.geometry("800x600")

notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True, padx=10, pady=10)

# ==== TAB 1: S·ª± ki·ªán ====
tab1 = ttk.Frame(notebook)
notebook.add(tab1, text="S·ª± ki·ªán")

tk.Label(tab1, text="M√£ s·ª± ki·ªán").pack()
e_id = tk.Entry(tab1)
e_id.pack()

tk.Label(tab1, text="T√™n s·ª± ki·ªán").pack()
e_name = tk.Entry(tab1)
e_name.pack()

tk.Label(tab1, text="Gi√° v√©").pack()
e_price = tk.Entry(tab1)
e_price.pack()

tk.Label(tab1, text="S·ªë v√© c√≤n").pack()
e_qty = tk.Entry(tab1)
e_qty.pack()

tk.Button(tab1, text="‚ûï Th√™m s·ª± ki·ªán", command=lambda: add_event(
    e_id.get(), e_name.get(), float(e_price.get()), int(e_qty.get()))).pack(pady=3)

tk.Button(tab1, text="üìù C·∫≠p nh·∫≠t v√©", command=lambda: update_event_quantity(
    e_id.get(), int(e_qty.get()))).pack(pady=3)

tk.Button(tab1, text="üìã Xem b√°o c√°o", command=generate_report).pack(pady=3)

# B·∫£ng hi·ªÉn th·ªã s·ª± ki·ªán
tree_events = ttk.Treeview(tab1, columns=("id", "name", "price", "left"), show="headings")
tree_events.heading("id", text="M√£ s·ª± ki·ªán")
tree_events.heading("name", text="T√™n s·ª± ki·ªán")
tree_events.heading("price", text="Gi√° v√© (VNƒê)")
tree_events.heading("left", text="S·ªë v√© c√≤n")
tree_events.pack(pady=10, fill="x")

def refresh_event_table():
    for i in tree_events.get_children():
        tree_events.delete(i)
    for ev in events:
        tree_events.insert("", "end", values=(
            ev["id"], ev["name"], f"{ev['ticket_price']:,.0f}", ev["tickets_left"]
        ))

refresh_event_table()

# ==== TAB 2: T√†i tr·ª£ ====
tab2 = ttk.Frame(notebook)
notebook.add(tab2, text="T√†i tr·ª£")

tk.Label(tab2, text="M√£ nh√† t√†i tr·ª£").pack()
s_id = tk.Entry(tab2)
s_id.pack()

tk.Label(tab2, text="T√™n c√¥ng ty").pack()
s_name = tk.Entry(tab2)
s_name.pack()

tk.Label(tab2, text="S·ªë ti·ªÅn t√†i tr·ª£").pack()
s_amt = tk.Entry(tab2)
s_amt.pack()

tk.Button(tab2, text="‚ûï Th√™m nh√† t√†i tr·ª£", command=lambda: add_sponsor(
    s_id.get(), s_name.get(), float(s_amt.get()))).pack(pady=3)

tk.Button(tab2, text="üìù C·∫≠p nh·∫≠t t√†i tr·ª£", command=lambda: update_sponsor_amount(
    s_id.get(), float(s_amt.get()))).pack(pady=3)

# B·∫£ng danh s√°ch nh√† t√†i tr·ª£
tree_sponsors = ttk.Treeview(tab2, columns=("id", "name", "amount"), show="headings")
tree_sponsors.heading("id", text="M√£")
tree_sponsors.heading("name", text="T√™n nh√† t√†i tr·ª£")
tree_sponsors.heading("amount", text="S·ªë ti·ªÅn (VNƒê)")
tree_sponsors.pack(pady=10, fill="x")

def refresh_sponsor_table():
    for i in tree_sponsors.get_children():
        tree_sponsors.delete(i)
    for sid, (name, amount) in sponsors.items():
        tree_sponsors.insert("", "end", values=(sid, name, f"{amount:,.0f}"))

refresh_sponsor_table()

# ==== TAB 3: B√°n v√© ====
tab3 = ttk.Frame(notebook)
notebook.add(tab3, text="B√°n v√©")

tk.Label(tab3, text="M√£ s·ª± ki·ªán").pack()
t_event = tk.Entry(tab3)
t_event.pack()

tk.Label(tab3, text="M√£ v√© (ex: TICKET_001)").pack()
t_id = tk.Entry(tab3)
t_id.pack()

tk.Label(tab3, text="S·ªë l∆∞·ª£ng").pack()
t_qty = tk.Entry(tab3)
t_qty.pack()

tk.Button(tab3, text="üí∏ B√°n v√©", command=lambda: process_ticket_sale(
    t_event.get(), t_id.get(), int(t_qty.get()))).pack(pady=3)

tk.Button(tab3, text="üìä B√°o c√°o", command=generate_report).pack(pady=3)

# B·∫£ng giao d·ªãch v√© ƒë√£ b√°n
tree_tickets = ttk.Treeview(tab3, columns=("event", "ticket", "qty"), show="headings")
tree_tickets.heading("event", text="M√£ s·ª± ki·ªán")
tree_tickets.heading("ticket", text="M√£ v√©")
tree_tickets.heading("qty", text="S·ªë l∆∞·ª£ng")
tree_tickets.pack(pady=10, fill="x")

def refresh_ticket_table():
    for i in tree_tickets.get_children():
        tree_tickets.delete(i)
    for item in ticket_history:
        tree_tickets.insert("", "end", values=(item["event_id"], item["ticket_id"], item["quantity"]))

# ==== KH·ªûI CH·∫†Y ====
root.mainloop()
