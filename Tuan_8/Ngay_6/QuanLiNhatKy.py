import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext
import os

def create_log():
    try:
        week = simpledialog.askinteger("1Ô∏è‚É£ T·∫°o nh·∫≠t k√Ω", "Tu·∫ßn:")
        hours = simpledialog.askfloat("1Ô∏è‚É£ T·∫°o nh·∫≠t k√Ω", "Nh·∫≠p s·ªë gi·ªù l√†m vi·ªác:")
        tasks = simpledialog.askinteger("1Ô∏è‚É£ T·∫°o nh·∫≠t k√Ω", "Nh·∫≠p s·ªë nhi·ªám v·ª• ho√†n th√†nh:")
        note = simpledialog.askstring("1Ô∏è‚É£ T·∫°o nh·∫≠t k√Ω", "Nh·∫≠p ghi ch√∫:")

        if None in (week, hours, tasks, note): return

        with open(f"week_{week}.txt", "w", encoding="utf-8") as f:
            f.write(f"Tu·∫ßn: {week}\n")
            f.write(f"S·ªë gi·ªù l√†m vi·ªác: {hours}\n")
            f.write(f"Nhi·ªám v·ª• ho√†n th√†nh: {tasks}\n")
            f.write(f"Ghi ch√∫: {note}\n")
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫°o nh·∫≠t k√Ω tu·∫ßn {week}")
    except:
        messagebox.showerror("L·ªói", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!")

def read_log():
    week = simpledialog.askinteger("2Ô∏è‚É£ ƒê·ªçc nh·∫≠t k√Ω", "Nh·∫≠p s·ªë tu·∫ßn c·∫ßn ƒë·ªçc:")
    if week is None: return
    filename = f"week_{week}.txt"
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()
        show_text("üìñ N·ªôi dung nh·∫≠t k√Ω", content)
    else:
        messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", f"Nh·∫≠t k√Ω tu·∫ßn {week} kh√¥ng t·ªìn t·∫°i.")

# H√†m c·∫≠p nh·∫≠t nh·∫≠t k√Ω tu·∫ßn
def update_log():
    try:
        week = simpledialog.askinteger("3Ô∏è‚É£ C·∫≠p nh·∫≠t nh·∫≠t k√Ω", "Nh·∫≠p s·ªë tu·∫ßn c·∫ßn c·∫≠p nh·∫≠t:")
        hours = simpledialog.askfloat("3Ô∏è‚É£ C·∫≠p nh·∫≠t nh·∫≠t k√Ω", "Nh·∫≠p s·ªë gi·ªù l√†m vi·ªác m·ªõi:")
        tasks = simpledialog.askinteger("3Ô∏è‚É£ C·∫≠p nh·∫≠t nh·∫≠t k√Ω", "Nh·∫≠p s·ªë nhi·ªám v·ª• ho√†n th√†nh m·ªõi:")
        note = simpledialog.askstring("3Ô∏è‚É£ C·∫≠p nh·∫≠t nh·∫≠t k√Ω", "Nh·∫≠p ghi ch√∫ m·ªõi:")

        if None in (week, hours, tasks, note): return

        with open(f"week_{week}.txt", "w", encoding="utf-8") as f:
            f.write(f"Tu·∫ßn: {week}\n")
            f.write(f"S·ªë gi·ªù l√†m vi·ªác: {hours}\n")
            f.write(f"Nhi·ªám v·ª• ho√†n th√†nh: {tasks}\n")
            f.write(f"Ghi ch√∫: {note}\n")
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t nh·∫≠t k√Ω tu·∫ßn {week}")
    except:
        messagebox.showerror("L·ªói", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!")

# H√†m x√≥a nh·∫≠t k√Ω
def delete_log():
    week = simpledialog.askinteger("4Ô∏è‚É£ X√≥a nh·∫≠t k√Ω", "Nh·∫≠p s·ªë tu·∫ßn c·∫ßn x√≥a:")
    if week is None: return
    filename = f"week_{week}.txt"
    if os.path.exists(filename):
        os.remove(filename)
        messagebox.showinfo("ƒê√£ x√≥a", f"ƒê√£ x√≥a nh·∫≠t k√Ω tu·∫ßn {week}")
    else:
        messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", f"Nh·∫≠t k√Ω tu·∫ßn {week} kh√¥ng t·ªìn t·∫°i.")

# H√†m t·∫°o b√°o c√°o t·ªïng k·∫øt
def generate_summary():
    total_weeks = 0
    total_hours = 0.0
    total_tasks = 0

    for file in os.listdir():
        if file.startswith("week_") and file.endswith(".txt"):
            total_weeks += 1
            with open(file, "r", encoding="utf-8") as f:
                for line in f.readlines():
                    if "S·ªë gi·ªù l√†m vi·ªác:" in line:
                        total_hours += float(line.split(":")[1].strip())
                    elif "Nhi·ªám v·ª• ho√†n th√†nh:" in line:
                        total_tasks += int(line.split(":")[1].strip())

    report = f"""üìä B√°o c√°o t·ªïng k·∫øt:
- T·ªïng s·ªë tu·∫ßn: {total_weeks}
- T·ªïng s·ªë gi·ªù l√†m vi·ªác: {total_hours}
- T·ªïng s·ªë nhi·ªám v·ª• ho√†n th√†nh: {total_tasks}"""
    show_text("üìä B√°o c√°o t·ªïng k·∫øt", report)


def show_all_logs():
    logs = []
    for file in sorted(os.listdir()):
        if file.startswith("week_") and file.endswith(".txt"):
            with open(file, "r", encoding="utf-8") as f:
                lines = f.readlines()
                try:
                    week = lines[0].strip().split(":")[1].strip()
                    hours = lines[1].strip().split(":")[1].strip()
                    tasks = lines[2].strip().split(":")[1].strip()
                    note = lines[3].strip().split(":")[1].strip()
                    logs.append(f"Tu·∫ßn {week} - Gi·ªù: {hours} - Nhi·ªám v·ª•: {tasks} - Ghi ch√∫: {note}")
                except:
                    logs.append(f"{file}: l·ªói ƒë·ªãnh d·∫°ng")
    if logs:
        content = "\n".join(logs)
        show_text("üìÇ Danh s√°ch c√°c nh·∫≠t k√Ω hi·ªán c√≥", content)
    else:
        messagebox.showinfo("Danh s√°ch tr·ªëng", "Kh√¥ng c√≥ nh·∫≠t k√Ω n√†o ƒë∆∞·ª£c l∆∞u.")


def show_text(title, content):
    win = tk.Toplevel(root)
    win.title(title)
    text_area = scrolledtext.ScrolledText(win, width=50, height=15, font=("Arial", 12))
    text_area.pack(padx=10, pady=10)
    text_area.insert(tk.END, content)
    text_area.config(state='disabled')

# Giao di·ªán ch√≠nh
root = tk.Tk()
root.title("üìò C√¥ng c·ª• qu·∫£n l√Ω nh·∫≠t k√Ω tu·∫ßn")
root.geometry("400x480")
root.resizable(False, False)

tk.Label(root, text="üìÖ Nh·∫≠t k√Ω tu·∫ßn l√†m vi·ªác", font=("Arial", 16, "bold")).pack(pady=20)

tk.Button(root, text="1Ô∏è. T·∫°o nh·∫≠t k√Ω tu·∫ßn", command=create_log, width=30, height=2).pack(pady=5)
tk.Button(root, text="2Ô∏è. ƒê·ªçc nh·∫≠t k√Ω tu·∫ßn", command=read_log, width=30, height=2).pack(pady=5)
tk.Button(root, text="3Ô∏è. C·∫≠p nh·∫≠t nh·∫≠t k√Ω tu·∫ßn", command=update_log, width=30, height=2).pack(pady=5)
tk.Button(root, text="4Ô∏è. X√≥a nh·∫≠t k√Ω tu·∫ßn", command=delete_log, width=30, height=2).pack(pady=5)
tk.Button(root, text="5Ô∏è. T·∫°o b√°o c√°o t·ªïng k·∫øt", command=generate_summary, width=30, height=2).pack(pady=5)
tk.Button(root, text="6Ô∏è. Danh s√°ch nh·∫≠t k√Ω hi·ªán c√≥", command=show_all_logs, width=30, height=2).pack(pady=5)
tk.Button(root, text="‚ùå Tho√°t", command=root.quit, width=30, height=2, bg="lightgray").pack(pady=20)

root.mainloop()
